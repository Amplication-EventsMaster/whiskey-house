/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { CreateMachineArgs } from "./CreateMachineArgs";
import { UpdateMachineArgs } from "./UpdateMachineArgs";
import { DeleteMachineArgs } from "./DeleteMachineArgs";
import { MachineCountArgs } from "./MachineCountArgs";
import { MachineFindManyArgs } from "./MachineFindManyArgs";
import { MachineFindUniqueArgs } from "./MachineFindUniqueArgs";
import { Machine } from "./Machine";
import { Process } from "../../process/base/Process";
import { MachineService } from "../machine.service";
@graphql.Resolver(() => Machine)
export class MachineResolverBase {
  constructor(protected readonly service: MachineService) {}

  async _machinesMeta(
    @graphql.Args() args: MachineCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Machine])
  async machines(
    @graphql.Args() args: MachineFindManyArgs
  ): Promise<Machine[]> {
    return this.service.findMany(args);
  }

  @graphql.Query(() => Machine, { nullable: true })
  async machine(
    @graphql.Args() args: MachineFindUniqueArgs
  ): Promise<Machine | null> {
    const result = await this.service.findOne(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Machine)
  async createMachine(
    @graphql.Args() args: CreateMachineArgs
  ): Promise<Machine> {
    return await this.service.create({
      ...args,
      data: {
        ...args.data,

        process: args.data.process
          ? {
              connect: args.data.process,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => Machine)
  async updateMachine(
    @graphql.Args() args: UpdateMachineArgs
  ): Promise<Machine | null> {
    try {
      return await this.service.update({
        ...args,
        data: {
          ...args.data,

          process: args.data.process
            ? {
                connect: args.data.process,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Machine)
  async deleteMachine(
    @graphql.Args() args: DeleteMachineArgs
  ): Promise<Machine | null> {
    try {
      return await this.service.delete(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Process, {
    nullable: true,
    name: "process",
  })
  async resolveFieldProcess(
    @graphql.Parent() parent: Machine
  ): Promise<Process | null> {
    const result = await this.service.getProcess(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
